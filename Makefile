.SILENT: ;               # no need for @
.ONESHELL: ;             # recipes execute in same shell
.NOTPARALLEL: ;          # wait for this target to finish
.EXPORT_ALL_VARIABLES: ; # send all vars to shell
Makefile: ;              # skip prerequisite discovery

SHELL ?= /bin/bash

# Determine this Makefile as Main file
THIS_MAKEFILE := $(word $(words $(MAKEFILE_LIST)), $(MAKEFILE_LIST))

# =================================================================
include ./.makefiles/colors.mk
include ./.makefiles/logo.mk
include ./.makefiles/functions.mk
# =================================================================

.PHONY: fullclean help

# Run make help by default
.DEFAULT_GOAL = help

# =================================================================
# Definitions:
# =================================================================

# Current Working Dir (Full path)
CWD        := $(shell cd $(shell dirname $(THIS_MAKEFILE)); pwd)
# Filter Makefile Input params to use they as target input params
ARGS       := $(filter-out $@, $(MAKECMDGOALS))
# Define Zephir SRC, bin, extension, etc...
ZEPHIR_SRC := $(call config,ZEPHIR_SRC,$(CWD)/.env)
ZEPHIR_BIN := $(ZEPHIR_SRC)/zephir
ZEPHIR_EXT := $(ZEPHIR_SRC)/ext/modules/test.so

ZEPHIR_VND := $(ZEPHIR_SRC)/vendor/bin

REPORT_PATH := $(ZEPHIR_SRC)/.zephir/reports

CS_FIXER    := $(ZEPHIR_VND)/php-cs-fixer
CODE_SNIFF  := $(ZEPHIR_VND)/phpcs

PHPUNIT     := $(ZEPHIR_VND)/simple-phpunit
PHPUNIT_EXT := php -d extension=$(ZEPHIR_EXT) $(PHPUNIT)
TEST_OPTS   := --configuration $(ZEPHIR_SRC)/phpunit.xml.dist

# Test Suite Selector
PHP_VERSION := $(shell php-config --vernum 2>/dev/null)
TEST_SUITE  = Extension_Php72
ifeq ($(shell test "$(PHP_VERSION)" -lt "70200"; echo $$?),0)
TEST_SUITE=Extension_Php70
endif

FILTER  = $(if $(filter-out $@, $(ARGS)), --filter $(filter-out $@, $(ARGS)), "")

# =================================================================
# Makefile Targets:
# =================================================================

---: ## --------------------------------------------------------------
fullclean: ## Cleans any object files created by the extension (incl. files generated by phpize)
	cd $(ZEPHIR_SRC) && $(ZEPHIR_BIN) fullclean

---: ## --------------------------------------------------------------
test-kernel: ## Run Zephir Kernel Tests
	@echo "$(Black)$(On_Green) *** Run Tests for Zephir Kernel *** $(NC)"
	cd $(ZEPHIR_SRC) && $(PHPUNIT_EXT) $(TEST_OPTS) $(FILTER) --testsuite Zephir

test-extension: ## Run Zephir Extension Tests
	@echo "$(Black)$(On_Green) *** Run Tests for Zephir Extension | $(TEST_SUITE) *** $(NC)"
	cd $(ZEPHIR_SRC) && $(PHPUNIT_EXT) $(TEST_OPTS) $(FILTER) \
	--bootstrap $(ZEPHIR_SRC)/unit-tests/ext-bootstrap.php \
	--testsuite $(TEST_SUITE)

---: ## --------------------------------------------------------------
memcheck: ## Check Extension Memory Leaks
	if test ! "$(shell valgrind --version 2>/dev/null)"; then \
		>&2 printf "Valgring does not exist. Can not check for memory leaks.\n"; \
		>&2 printf "Aborting.\n"; \
		exit 1; \
	fi

	# Correctly show the stack frames for extensions compiled as shared libraries
	export ZEND_DONT_UNLOAD_MODULES=1
	# Disable Zend memory manager before running PHP with valgrind
	export USE_ZEND_ALLOC=0
	# Do not stop testing on failures
	export PHPUNIT_DONT_EXIT=1
	
	valgrind \
	--read-var-info=yes \
	--fullpath-after= \
	--error-exitcode=1 \
	--track-origins=yes \
	--leak-check=full \
	--num-callers=20 \
	--run-libc-freeres=no \
	$(PHPUNIT_EXT) --no-coverage --testsuite "Extension Test Suite"

---: ## ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
cs-fixer: ## Run PHP CS-Fixer Dry-run
	cd $(ZEPHIR_SRC) && $(CS_FIXER) --diff --dry-run -v fix

codesniffer: ## Run PHP CodeSniffer
	[ -d $(REPORT_PATH) ] || mkdir -p $(REPORT_PATH)
	(cd $(ZEPHIR_SRC) && $(CODE_SNIFF) \
	--parallel=4 \
	--report-summary \
	--report-full=$(REPORT_PATH)/phpcs.log) \
	&& ([ $$? -eq 0 ] && echo "$(SUCCESS)") \
	|| (cat $(REPORT_PATH)/phpcs.log && echo "$(FAILURE)")

---: ## --------------------------------------------------------------
help: .logo ## Show this help and exit
	@echo "$(Yellow)Usage:$(NC)\n  make [command] [arguments]"
	@echo ''
	@echo "$(Yellow)Arguments:$(NC)"
	printf "  $(Green)%-15s$(NC) %s\n" "testName" "for all test runners - Filter which tests to run"
	@echo ''
	@echo "$(Yellow)Targets:$(NC)"
	@echo ''
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(THIS_MAKEFILE) | awk 'BEGIN {FS = ":.*?## "}; \
		{printf "  $(Cyan)%-15s$(NC) %s\n", $$1, $$2}'
	@echo ''
%:
	@:

